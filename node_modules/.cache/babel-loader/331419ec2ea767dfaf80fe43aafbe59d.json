{"ast":null,"code":"/**\n * @author Kuitos\n * @homepage https://github.com/kuitos/\n * @since 2017-10-11\n */\nimport * as tslib_1 from \"tslib\";\nimport LRUCache from 'lru-cache';\nimport buildSortedURL from './utils/buildSortedURL';\nexport default function throttleAdapterEnhancer(adapter, options) {\n  var _this = this;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.threshold,\n      threshold = _a === void 0 ? 1000 : _a,\n      _b = options.cache,\n      cache = _b === void 0 ? new LRUCache({\n    max: 10\n  }) : _b;\n\n  var recordCacheWithRequest = function recordCacheWithRequest(index, config) {\n    var responsePromise = function () {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var response, reason_1;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , adapter(config)];\n\n            case 1:\n              response = _a.sent();\n              cache.set(index, {\n                timestamp: Date.now(),\n                value: Promise.resolve(response)\n              });\n              return [2\n              /*return*/\n              , response];\n\n            case 2:\n              reason_1 = _a.sent();\n              cache.del(index);\n              throw reason_1;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }();\n\n    cache.set(index, {\n      timestamp: Date.now(),\n      value: responsePromise\n    });\n    return responsePromise;\n  };\n\n  return function (config) {\n    var url = config.url,\n        method = config.method,\n        params = config.params,\n        paramsSerializer = config.paramsSerializer;\n    var index = buildSortedURL(url, params, paramsSerializer);\n    var now = Date.now();\n    var cachedRecord = cache.get(index) || {\n      timestamp: now\n    };\n\n    if (method === 'get') {\n      if (now - cachedRecord.timestamp <= threshold) {\n        var responsePromise = cachedRecord.value;\n\n        if (responsePromise) {\n          /* istanbul ignore next */\n          if (process.env.LOGGER_LEVEL === 'info') {\n            // eslint-disable-next-line no-console\n            console.info(\"request cached by throttle adapter: \" + index);\n          }\n\n          return responsePromise;\n        }\n      }\n\n      return recordCacheWithRequest(index, config);\n    }\n\n    return adapter(config);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}